{
  
    
        "post0": {
            "title": "Unix tips and common solutions.",
            "content": "My encountered problems and solutions . This part of blog is dedicated to problems that I run into regularly but not often enough to remember the solutions. . Markdown cheatsheet to make this nice style. | OS, bash, and installation problems and solutions . Cannot uninstall ‘&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it and which would lead to only a partial uninstall. This problem occurred while updating [DVC](https://pypi.org/project/dvc/). The fast and easy solution without burden of downgrading pip, resolving it, and upgrading pip back was found on [stackoverflow](https://stackoverflow.com/questions/53807511/pip-cannot-uninstall-package-it-is-a-distutils-installed-project) `pip install --ignore-installed` . | screen -S your_name and renaming already existing screen from stackoverflow . | 2.1. In case screen is bugged and appears as attached but you have no open terminal with this screen . screen -r yourName There is a screen on: 8600.yourName (02/28/2021 01:33:59 PM) (Attached) There is no screen to be resumed matching yourName. . Then you can reconnect with screen -D -r yourName . Anaconda . Never use conda base env for conda update -n base conda - it can ruin all conda installation, especially when there are more than one python version installed. (for example python3.7 and python3.8) | Jupyter . Can’t select kernel in notebook or jupyter lab. | Install in (base) conda env pip install --user ipykernel and add your virtual environment to Jupyter by typing: python -m ipykernel install --user --name=myCondaEnv | . PIP . How to solve ReadTimeoutError: HTTPSConnectionPool(host=’pypi.python.org’, port=443) with pip? | stop proxy or active VPN for installation time. In my case I stopped Hamachi LogMeIn client and reconnected to Wi-Fi. | . Docker . Run nvidia-based docker mapping it to all available GPUs on the machine docker run -it --rm -v /data:/data --gpus all --shm-size=64g my/docker_name:version1. Where -v is mapping, --rm performs clean up when the task is done. . | Connect running container docker exec -it e14e37231d7c /bin/bash. To detach use ctrl+P+Q . | Bash . Disk space management. df -h and du -h --max-depth=1 | Find and remove find /dir/to/search/ -type f -name &quot;FILE-TO-FIND-Regex&quot; -exec rm -f {} ;, for example find . -type f -name &quot;events.out.tfevents.*&quot; -exec rm -f {} ; |",
            "url": "https://igorkasianenko.github.io/fastpages-igor/deep%20learning/coding/2022/08/16/unix-tips.html",
            "relUrl": "/deep%20learning/coding/2022/08/16/unix-tips.html",
            "date": " • Aug 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Things to check when I test a model.",
            "content": "This is logical continuation of my first blogpost about Training the model. . Some times when testing new models with validation accuracy &gt;90%, test accuracy can be &lt; 0.1%. This is pretty strong signal that there is a bug in testing. I would like to list most common ones, in order to eliminate them fast next time something is not working. . When the results are close to 0: Loaded model is in eval mode. | Input normalized the same way it was in training. | . | When the results are bad but not 0: Validate on balanced data, so the long tail classes won’t screw the accuracy. | . | If you aim for accuracy and don’t have inference time constraints: Use test time augmentation. | Consider model ensemble from multiple checkpoints | . |",
            "url": "https://igorkasianenko.github.io/fastpages-igor/deep%20learning/2022/08/03/things-to-check-when-validating-model.html",
            "relUrl": "/deep%20learning/2022/08/03/things-to-check-when-validating-model.html",
            "date": " • Aug 3, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My movie list",
            "content": "From one side, the blog should be mostly technical and about Deep learning. But there is always time for a good movie, like there is always time for a good read. So here it goes, movies gropped by topics that I watch and would love to recommend if you are into these kind of movies. . Historical / based on real story / biography: . Trumbo 2015 | Race 2016 | Pawn Sacrifice 2014 | Woman in Gold 2015 | Denial 2016 | The Founder 2016 | The Big Short 2015 | Snowden 2016 | Molly’s Game 2017 | Hidden Figures 2016 | The King’s Speech 2010 | The Imitation Game 2014 | Darkest Hour 2017 | The Post 2017 | Sully: Miracle on the Hudson 2016 | A Beautiful Mind 2001 | Catch Me If You Can 2002 | Hitchcock 2012 | The Heineken Kidnapping 2011 | . Next are some particularly heavy movies worth watching to understand what was happening less than 100 years ago . The Boy in the Striped Pyjamas 2008 | The Pianist 2002 | Schindler’s List 1993 | Life Is Beautiful 1997 | . | Documentary: . My Generation 2017 | RBG 2018 | Ask Dr. Ruth 2019 | . | Comedy or movies that make you smile (Sorry if the movie is too much drama with only bits of comedy): . Untouchable 2011 | The Grand Budapest Hotel 2014 | Moonrise Kingdom 2012 | The Darjeeling Limited 2007 | Royal Tennebaums 2001 | The Truman Show 1998 | Carnage 2011 | . | Social drama (with hint of comedy): . Good luck to you Leo Grande 2022 | . | To be continued … .",
            "url": "https://igorkasianenko.github.io/fastpages-igor/hobby/2021/11/22/movies.html",
            "relUrl": "/hobby/2021/11/22/movies.html",
            "date": " • Nov 22, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Things to check when I train a model.",
            "content": "According to the research mentioned in book ‘Mastermind: How to Think Like Sherlock Holmes’ by Maria Konnikova, even highly skilled professions like medical doctors are prone to errors and forget important steps in their work if they don’t have written guidance or recepe to do routine repetitive tasks. . So, I decided to write down a list of things that I should check to avoid ruining experiments and save time. . Check that optimizer and learning rate (SGD, Adam, etc.) is exactly what you need and not old values from previous experiments. | Check train and validation augmentations | Check number of epochs to train | Check if the model is pre-trained or you resume from trained checkpoint. If resume, lower lr (if you don’t use lr scheduler for # epoch) | Check that model is frozen unfrozen like you need. | Check dataset. Most of the cases in real world data it is not balanced, so do over- and undersampling. If it is production data - pull latest updates. | Check batch size, num_workers for data loader, cuda # if you have &gt; 1 GPU. | Check the experiment name for logging. I use ClearML(https://clear.ml/) at work and can recommend them for friendly slack community. | Also inspired by https://twitter.com/karpathy/status/1013244313327681536 .",
            "url": "https://igorkasianenko.github.io/fastpages-igor/deep%20learning/2021/05/08/things-to-check-when-training-model.html",
            "relUrl": "/deep%20learning/2021/05/08/things-to-check-when-training-model.html",
            "date": " • May 8, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Why I started personal blog",
            "content": "First reason - Rachel’s blog post “why you should blog”. Jeremy and Rachel co-founded fast.ai, and gave me great opportunity to enter Deep learning. . fast.ai is - . Deep Learning library | Massive open online course | Friendly community. | And other useful things like this blogging template, that was used to host this blog. . They use top-down learning approach, and this was first time after my school years that I really enjoyed studying. I tried to do other MOOC, but they were to slow and theoretical. Jumping right into code - this is what I liked and what kept me going with Deep learning at fastai. Hands on experience in training models helped me switch industry and start working at great start up. Now I am training models and creating exiting products like facial recognition, age gender detection on Android devices on the edge, as well as fruits and vegetables recognition for scales and self-checkouts in supermarkets (already in production! short video). . In the end I want to thank Rachel Thomas and Jeremy Howard from fastai, Yannic Kilcher, the YouTube guy, and Derek Sivers for inspiring me to learn new things and share knowledge with the world and to my wife for supporting me in everything. .",
            "url": "https://igorkasianenko.github.io/fastpages-igor/fastai/learning/2021/05/08/my-first-markdown-post.html",
            "relUrl": "/fastai/learning/2021/05/08/my-first-markdown-post.html",
            "date": " • May 8, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://igorkasianenko.github.io/fastpages-igor/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is my personal blog. This page will soon become “Now” page like inspired by Derek Sivers now page . Contact me . kasianenko@pm.me . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://igorkasianenko.github.io/fastpages-igor/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://igorkasianenko.github.io/fastpages-igor/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}